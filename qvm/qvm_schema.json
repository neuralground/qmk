{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://qmk.dev/schemas/qvm-0.1.json",
  "title": "QVM Graph Specification v0.1",
  "description": "Quantum Virtual Machine (QVM) graph format for the Quantum Microkernel (QMK). Defines a declarative DAG of quantum operations over linear, capability-guarded handles.",
  "type": "object",
  "required": [
    "version",
    "program",
    "resources",
    "caps"
  ],
  "properties": {
    "version": {
      "type": "string",
      "const": "0.1",
      "description": "QVM format version. Current version is 0.1."
    },
    "program": {
      "type": "object",
      "description": "The quantum program as a directed acyclic graph (DAG) of operations.",
      "required": [
        "nodes"
      ],
      "properties": {
        "nodes": {
          "type": "array",
          "description": "Array of operation nodes in the DAG. Order does not imply execution order; dependencies are determined by handle flow.",
          "items": {
            "type": "object",
            "required": [
              "id",
              "op"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for this node within the graph.",
                "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
              },
              "op": {
                "type": "string",
                "description": "Operation opcode (e.g., APPLY_H, MEASURE_Z, ALLOC_LQ).",
                "enum": [
                  "ALLOC_LQ", "FREE_LQ", "FENCE_EPOCH", "BAR_REGION",
                  "APPLY_H", "APPLY_S", "APPLY_X", "APPLY_Y", "APPLY_Z", "APPLY_CNOT",
                  "RESET", "MEASURE_Z", "MEASURE_X",
                  "TELEPORT_CNOT", "INJECT_T_STATE", "OPEN_CHAN", "USE_CHAN", "CLOSE_CHAN",
                  "COND_PAULI", "SET_POLICY"
                ]
              },
              "args": {
                "type": "object",
                "description": "Operation-specific arguments (e.g., allocation profile, rotation angles, policy settings)."
              },
              "inputs": {
                "type": "array",
                "description": "Event handles consumed by this operation (for conditional operations and guards).",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "produces": {
                "type": "array",
                "description": "Event handles produced by this operation (e.g., measurement outcomes).",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "vqs": {
                "type": "array",
                "description": "Virtual qubit (VQ) handles consumed/produced by this operation. Linear resources with single-owner semantics.",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "chs": {
                "type": "array",
                "description": "Channel (CH) handles consumed/produced by this operation. Linear resources representing entanglement.",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "caps": {
                "type": "array",
                "description": "Capability tokens required by this operation (e.g., CAP_ALLOC, CAP_TELEPORT).",
                "items": {
                  "type": "string",
                  "pattern": "^CAP_[A-Z_]+$"
                },
                "default": []
              },
              "guard": {
                "type": "object",
                "description": "Optional guard predicate for conditional execution based on measurement outcome.",
                "properties": {
                  "event": {
                    "type": "string",
                    "description": "Event handle to check (must be produced by a prior measurement)."
                  },
                  "equals": {
                    "type": "integer",
                    "description": "Expected event value (0 or 1). Node executes only if event matches this value.",
                    "enum": [
                      0,
                      1
                    ]
                  }
                },
                "required": [
                  "event",
                  "equals"
                ],
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "resources": {
      "type": "object",
      "description": "Declaration of all resource handles used in the program.",
      "properties": {
        "vqs": {
          "type": "array",
          "description": "All virtual qubit handles used in the program.",
          "items": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
          },
          "uniqueItems": true
        },
        "chs": {
          "type": "array",
          "description": "All channel handles used in the program.",
          "items": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
          },
          "uniqueItems": true
        },
        "events": {
          "type": "array",
          "description": "All event handles (measurement outcomes) used in the program.",
          "items": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
          },
          "uniqueItems": true
        }
      },
      "required": [
        "vqs",
        "chs",
        "events"
      ]
    },
    "caps": {
      "type": "array",
      "description": "Capabilities required by this program. Kernel verifies tenant possesses these capabilities before execution.",
      "items": {
        "type": "string",
        "pattern": "^CAP_[A-Z_]+$",
        "enum": [
          "CAP_ALLOC",
          "CAP_TELEPORT",
          "CAP_MAGIC",
          "CAP_LINK"
        ]
      },
      "uniqueItems": true
    }
  }
}
